{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "cdbbf41e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Unnamed: 0   Income  Limit  Rating  Cards  Age  Education  Gender Student  \\\n",
      "0           1   14.891   3606     283      2   34         11    Male      No   \n",
      "1           2  106.025   6645     483      3   82         15  Female     Yes   \n",
      "2           3  104.593   7075     514      4   71         11    Male      No   \n",
      "3           4  148.924   9504     681      3   36         11  Female      No   \n",
      "4           5   55.882   4897     357      2   68         16    Male      No   \n",
      "\n",
      "  Married  Ethnicity  Balance  \n",
      "0     Yes  Caucasian      333  \n",
      "1     Yes      Asian      903  \n",
      "2      No      Asian      580  \n",
      "3      No      Asian      964  \n",
      "4     Yes  Caucasian      331  \n",
      "Accuracy of Decision Tree: 0.15\n"
     ]
    }
   ],
   "source": [
    "#impoting data from Credit.csv\n",
    "\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Load the dataset\n",
    "data = pd.read_csv(\"Credit.csv\")\n",
    "\n",
    "# Check the first few rows to understand the structure\n",
    "print(data.head())\n",
    "\n",
    "# Drop the 'Unnamed: 0' column as it's just an index\n",
    "data = data.drop(columns=['Unnamed: 0'])\n",
    "\n",
    "# Use One-Hot Encoding to convert categorical columns into numerical columns\n",
    "data = pd.get_dummies(data, drop_first=True)\n",
    "\n",
    "# Separate features (X) and target (y)\n",
    "# Assuming 'Balance' is the target column, replace with your actual target column\n",
    "X = data.drop(columns='Balance')  # Features\n",
    "y = data['Balance']  # Target column\n",
    "\n",
    "# Split the dataset into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize and train the Decision Tree model\n",
    "dt_model = DecisionTreeClassifier()\n",
    "dt_model.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions on the test set\n",
    "y_pred = dt_model.predict(X_test)\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "print(f\"Accuracy of Decision Tree: {accuracy:.2f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d243644f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
